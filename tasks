#!/bin/bash

set -eu

if [[ -f ~/.bashrc.d/tmdb ]]; then
  source ~/.bashrc.d/tmdb
fi
if [[ -f ~/.bashrc.d/heroku ]]; then
  source ~/.bashrc.d/heroku
fi

command="$1"
case "${command}" in
  docker_build)
      cd ops/
      docker build -t piis-web:0.1.0 .
      exit $?
      ;;
  up)
      docker-compose -f ./docker-compose.yml -p piis up -d
      exit $?
      ;;
  test)
      docker exec piis_web_1 bash -c 'cd /usr/src/app && python manage.py test -v 2'
      exit $?
      ;;
  itest)
      # use testinfra to test commands
      docker exec piis_web_1 bash -c 'cd /usr/src/app && py.test -v test/test_commands.py'
      exit $?
      ;;
  down)
      docker-compose -f ./docker-compose.yml -p piis down
      exit $?
      ;;
  _heroku_up)
      rm -f ./terraform/app.tar.gz
      tar -czf ./terraform/app.tar.gz --exclude=terraform --exclude=db --exclude=media/*.jpg .
      export TF_VAR_tmdb_api_key=${TMDB_API_KEY}
      export TF_VAR_heroku_api_key=${HEROKU_API_KEY}
      #sudo rm -rf test/__pycache__
      cd terraform/
      terraform init
      terraform get
      terraform plan -out=tf.tfplan
      terraform apply tf.tfplan
      exit $?
      ;;
  _heroku_destroy)
      export TF_VAR_tmdb_api_key=${TMDB_API_KEY}
      export TF_VAR_heroku_api_key=${HEROKU_API_KEY}
      #sudo rm -rf test/__pycache__
      cd terraform/
      terraform init
      terraform get
      terraform plan -out=tf.tfplan -destroy
      terraform apply tf.tfplan
      exit $?
      ;;
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
set +e
